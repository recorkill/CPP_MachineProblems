For this assignment, three C++ programs were created to demonstrate and explore the functionality of stacks. Three separate tasks were taught to be performed, each by one of the three programs. Firstly, a program was designed to check if a specific pattern was present in a user-provided string. The pattern of interest was when two sides of a string, intersected by the ‘#’ character, were mirror images of one another. The use of a stack was particularly useful for this task, as the first half of the string was pushed to a stack, which was then consecutively popped for each matching term on the other side of the ‘#’ character. 

Next, a program was designed to allow for changing a user-provided number (initially as base 10) into a different, specified, base and returning it to the user. This was done by creating a stack of all remainder terms from division by the new base, and subsequently popping each term into the returned number. This was made possible by a stack, wherein the first-in-last-out nature of a stack was ideal.

Lastly, a program was created to check if the parenthesis, square-brackets, and curly-brackets of a line of text were correctly balanced, and ensuring proper nesting is used. The use of a stack was once again imperative, as it allowed for opening terms- ‘{‘, ‘[‘, and ‘(‘- to be pushed to the opening-character stack and comparing each closing character to the top of the stack (and popping the top of the stack, when the match is confirmed). This proved to be a very efficient way to complete this task.
