For this assignment, a C++ program was created to replicate a fraction calculator, wherein a user would be able to perform a number of operations on fractions they would enter into the calculator. Due to C++ not recognizing “fractions” as units of value, a “Fraction” class was created to handle these items. Within this class, the concept of operator overloading, wherein the implementation of an operator can be controlled for an object, was taken advantage, allowing for more streamlined operations with Fraction objects. 

This program supported man binary (+, -, /, *, +=, -=, *=, /=, ==, >=, <=, <, >, !=) as well as unary (++, --, -, ~, !) operations, in addition to the (float) and (double) casting operators. Upon execution, this program prompts a user to select which type of calculation they would like to perform, from the options of unary (prefix and postfix) and binary, with casting operators included in the unary prefix calculations. If a user does not enter one of these options, they are prompted to try again using the proper keyword and provided with the list of supported operations associated with each keyword. This was done to establish an expectation of what information was going to be supplied by the user, and in what order (i.e., whether to expect one or two fractions, and where to expect an operator to be entered). Once this selection was made, the user can enter a calculation, and the result is returned to them. Finally, the user is given the option to continue performing operations, wherein they can enter ‘q’ or ‘Q’ to end the program or enter any other character to continue. 
